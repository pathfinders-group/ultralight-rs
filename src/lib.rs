/* automatically generated by rust-bindgen 0.60.1 */

pub const JSC_OBJC_API_ENABLED: u32 = 0;
pub type size_t = ::std::os::raw::c_ulonglong;
pub type wchar_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSContextGroup {
    _unused: [u8; 0],
}
pub type JSContextGroupRef = *const OpaqueJSContextGroup;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSContext {
    _unused: [u8; 0],
}
pub type JSContextRef = *const OpaqueJSContext;
pub type JSGlobalContextRef = *mut OpaqueJSContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSString {
    _unused: [u8; 0],
}
pub type JSStringRef = *mut OpaqueJSString;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSClass {
    _unused: [u8; 0],
}
pub type JSClassRef = *mut OpaqueJSClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSPropertyNameArray {
    _unused: [u8; 0],
}
pub type JSPropertyNameArrayRef = *mut OpaqueJSPropertyNameArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSPropertyNameAccumulator {
    _unused: [u8; 0],
}
pub type JSPropertyNameAccumulatorRef = *mut OpaqueJSPropertyNameAccumulator;
pub type JSTypedArrayBytesDeallocator = ::std::option::Option<
    unsafe extern "C" fn(
        bytes: *mut ::std::os::raw::c_void,
        deallocatorContext: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSValue {
    _unused: [u8; 0],
}
pub type JSValueRef = *const OpaqueJSValue;
pub type JSObjectRef = *mut OpaqueJSValue;
extern "C" {
    pub fn JSEvaluateScript(
        ctx: JSContextRef,
        script: JSStringRef,
        thisObject: JSObjectRef,
        sourceURL: JSStringRef,
        startingLineNumber: ::std::os::raw::c_int,
        exception: *mut JSValueRef,
    ) -> JSValueRef;
}
extern "C" {
    pub fn JSCheckScriptSyntax(
        ctx: JSContextRef,
        script: JSStringRef,
        sourceURL: JSStringRef,
        startingLineNumber: ::std::os::raw::c_int,
        exception: *mut JSValueRef,
    ) -> bool;
}
extern "C" {
    pub fn JSGarbageCollect(ctx: JSContextRef);
}
pub const JSType_kJSTypeUndefined: JSType = 0;
pub const JSType_kJSTypeNull: JSType = 1;
pub const JSType_kJSTypeBoolean: JSType = 2;
pub const JSType_kJSTypeNumber: JSType = 3;
pub const JSType_kJSTypeString: JSType = 4;
pub const JSType_kJSTypeObject: JSType = 5;
pub const JSType_kJSTypeSymbol: JSType = 6;
pub type JSType = ::std::os::raw::c_int;
pub const JSTypedArrayType_kJSTypedArrayTypeInt8Array: JSTypedArrayType = 0;
pub const JSTypedArrayType_kJSTypedArrayTypeInt16Array: JSTypedArrayType = 1;
pub const JSTypedArrayType_kJSTypedArrayTypeInt32Array: JSTypedArrayType = 2;
pub const JSTypedArrayType_kJSTypedArrayTypeUint8Array: JSTypedArrayType = 3;
pub const JSTypedArrayType_kJSTypedArrayTypeUint8ClampedArray: JSTypedArrayType = 4;
pub const JSTypedArrayType_kJSTypedArrayTypeUint16Array: JSTypedArrayType = 5;
pub const JSTypedArrayType_kJSTypedArrayTypeUint32Array: JSTypedArrayType = 6;
pub const JSTypedArrayType_kJSTypedArrayTypeFloat32Array: JSTypedArrayType = 7;
pub const JSTypedArrayType_kJSTypedArrayTypeFloat64Array: JSTypedArrayType = 8;
pub const JSTypedArrayType_kJSTypedArrayTypeArrayBuffer: JSTypedArrayType = 9;
pub const JSTypedArrayType_kJSTypedArrayTypeNone: JSTypedArrayType = 10;
pub type JSTypedArrayType = ::std::os::raw::c_int;
extern "C" {
    pub fn JSValueGetType(ctx: JSContextRef, value: JSValueRef) -> JSType;
}
extern "C" {
    pub fn JSValueIsUndefined(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueIsNull(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueIsBoolean(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueIsNumber(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueIsString(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueIsSymbol(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueIsObject(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueIsObjectOfClass(
        ctx: JSContextRef,
        value: JSValueRef,
        jsClass: JSClassRef,
    ) -> bool;
}
extern "C" {
    pub fn JSValueIsArray(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueIsDate(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueGetTypedArrayType(
        ctx: JSContextRef,
        value: JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSTypedArrayType;
}
extern "C" {
    pub fn JSValueIsEqual(
        ctx: JSContextRef,
        a: JSValueRef,
        b: JSValueRef,
        exception: *mut JSValueRef,
    ) -> bool;
}
extern "C" {
    pub fn JSValueIsStrictEqual(ctx: JSContextRef, a: JSValueRef, b: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueIsInstanceOfConstructor(
        ctx: JSContextRef,
        value: JSValueRef,
        constructor: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> bool;
}
extern "C" {
    pub fn JSValueMakeUndefined(ctx: JSContextRef) -> JSValueRef;
}
extern "C" {
    pub fn JSValueMakeNull(ctx: JSContextRef) -> JSValueRef;
}
extern "C" {
    pub fn JSValueMakeBoolean(ctx: JSContextRef, boolean: bool) -> JSValueRef;
}
extern "C" {
    pub fn JSValueMakeNumber(ctx: JSContextRef, number: f64) -> JSValueRef;
}
extern "C" {
    pub fn JSValueMakeString(ctx: JSContextRef, string: JSStringRef) -> JSValueRef;
}
extern "C" {
    pub fn JSValueMakeSymbol(ctx: JSContextRef, description: JSStringRef) -> JSValueRef;
}
extern "C" {
    pub fn JSValueMakeFromJSONString(ctx: JSContextRef, string: JSStringRef) -> JSValueRef;
}
extern "C" {
    pub fn JSValueCreateJSONString(
        ctx: JSContextRef,
        value: JSValueRef,
        indent: ::std::os::raw::c_uint,
        exception: *mut JSValueRef,
    ) -> JSStringRef;
}
extern "C" {
    pub fn JSValueToBoolean(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    pub fn JSValueToNumber(ctx: JSContextRef, value: JSValueRef, exception: *mut JSValueRef)
        -> f64;
}
extern "C" {
    pub fn JSValueToStringCopy(
        ctx: JSContextRef,
        value: JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSStringRef;
}
extern "C" {
    pub fn JSValueToObject(
        ctx: JSContextRef,
        value: JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    pub fn JSValueProtect(ctx: JSContextRef, value: JSValueRef);
}
extern "C" {
    pub fn JSValueUnprotect(ctx: JSContextRef, value: JSValueRef);
}
pub const kJSPropertyAttributeNone: _bindgen_ty_1 = 0;
pub const kJSPropertyAttributeReadOnly: _bindgen_ty_1 = 2;
pub const kJSPropertyAttributeDontEnum: _bindgen_ty_1 = 4;
pub const kJSPropertyAttributeDontDelete: _bindgen_ty_1 = 8;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
pub type JSPropertyAttributes = ::std::os::raw::c_uint;
pub const kJSClassAttributeNone: _bindgen_ty_2 = 0;
pub const kJSClassAttributeNoAutomaticPrototype: _bindgen_ty_2 = 2;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
pub type JSClassAttributes = ::std::os::raw::c_uint;
pub type JSObjectInitializeCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: JSContextRef, object: JSObjectRef)>;
pub type JSObjectInitializeCallbackEx = ::std::option::Option<
    unsafe extern "C" fn(ctx: JSContextRef, jsClass: JSClassRef, object: JSObjectRef),
>;
pub type JSObjectFinalizeCallback =
    ::std::option::Option<unsafe extern "C" fn(object: JSObjectRef)>;
pub type JSObjectFinalizeCallbackEx =
    ::std::option::Option<unsafe extern "C" fn(jsClass: JSClassRef, object: JSObjectRef)>;
pub type JSObjectHasPropertyCallback = ::std::option::Option<
    unsafe extern "C" fn(ctx: JSContextRef, object: JSObjectRef, propertyName: JSStringRef) -> bool,
>;
pub type JSObjectHasPropertyCallbackEx = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        jsClass: JSClassRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
    ) -> bool,
>;
pub type JSObjectGetPropertyCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
        exception: *mut JSValueRef,
    ) -> JSValueRef,
>;
pub type JSObjectGetPropertyCallbackEx = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        jsClass: JSClassRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
        exception: *mut JSValueRef,
    ) -> JSValueRef,
>;
pub type JSObjectSetPropertyCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
        value: JSValueRef,
        exception: *mut JSValueRef,
    ) -> bool,
>;
pub type JSObjectSetPropertyCallbackEx = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        jsClass: JSClassRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
        value: JSValueRef,
        exception: *mut JSValueRef,
    ) -> bool,
>;
pub type JSObjectDeletePropertyCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
        exception: *mut JSValueRef,
    ) -> bool,
>;
pub type JSObjectDeletePropertyCallbackEx = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        jsClass: JSClassRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
        exception: *mut JSValueRef,
    ) -> bool,
>;
pub type JSObjectGetPropertyNamesCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyNames: JSPropertyNameAccumulatorRef,
    ),
>;
pub type JSObjectGetPropertyNamesCallbackEx = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        jsClass: JSClassRef,
        object: JSObjectRef,
        propertyNames: JSPropertyNameAccumulatorRef,
    ),
>;
pub type JSObjectCallAsFunctionCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        function: JSObjectRef,
        thisObject: JSObjectRef,
        argumentCount: size_t,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSValueRef,
>;
pub type JSObjectCallAsFunctionCallbackEx = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        jsClass: JSClassRef,
        className: JSStringRef,
        function: JSObjectRef,
        thisObject: JSObjectRef,
        argumentCount: size_t,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSValueRef,
>;
pub type JSObjectCallAsConstructorCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        constructor: JSObjectRef,
        argumentCount: size_t,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef,
>;
pub type JSObjectCallAsConstructorCallbackEx = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        jsClass: JSClassRef,
        constructor: JSObjectRef,
        argumentCount: size_t,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef,
>;
pub type JSObjectHasInstanceCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        constructor: JSObjectRef,
        possibleInstance: JSValueRef,
        exception: *mut JSValueRef,
    ) -> bool,
>;
pub type JSObjectHasInstanceCallbackEx = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        jsClass: JSClassRef,
        constructor: JSObjectRef,
        possibleInstance: JSValueRef,
        exception: *mut JSValueRef,
    ) -> bool,
>;
pub type JSObjectConvertToTypeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        object: JSObjectRef,
        type_: JSType,
        exception: *mut JSValueRef,
    ) -> JSValueRef,
>;
pub type JSObjectConvertToTypeCallbackEx = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        jsClass: JSClassRef,
        object: JSObjectRef,
        type_: JSType,
        exception: *mut JSValueRef,
    ) -> JSValueRef,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSStaticValue {
    pub name: *const ::std::os::raw::c_char,
    pub getProperty: JSObjectGetPropertyCallback,
    pub setProperty: JSObjectSetPropertyCallback,
    pub attributes: JSPropertyAttributes,
}
#[test]
fn bindgen_test_layout_JSStaticValue() {
    assert_eq!(
        ::std::mem::size_of::<JSStaticValue>(),
        32usize,
        concat!("Size of: ", stringify!(JSStaticValue))
    );
    assert_eq!(
        ::std::mem::align_of::<JSStaticValue>(),
        8usize,
        concat!("Alignment of ", stringify!(JSStaticValue))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSStaticValue>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(JSStaticValue),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_getProperty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSStaticValue>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).getProperty) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(JSStaticValue),
                "::",
                stringify!(getProperty)
            )
        );
    }
    test_field_getProperty();
    fn test_field_setProperty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSStaticValue>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).setProperty) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(JSStaticValue),
                "::",
                stringify!(setProperty)
            )
        );
    }
    test_field_setProperty();
    fn test_field_attributes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSStaticValue>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(JSStaticValue),
                "::",
                stringify!(attributes)
            )
        );
    }
    test_field_attributes();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSStaticValueEx {
    pub name: *const ::std::os::raw::c_char,
    pub getPropertyEx: JSObjectGetPropertyCallbackEx,
    pub setPropertyEx: JSObjectSetPropertyCallbackEx,
    pub attributes: JSPropertyAttributes,
}
#[test]
fn bindgen_test_layout_JSStaticValueEx() {
    assert_eq!(
        ::std::mem::size_of::<JSStaticValueEx>(),
        32usize,
        concat!("Size of: ", stringify!(JSStaticValueEx))
    );
    assert_eq!(
        ::std::mem::align_of::<JSStaticValueEx>(),
        8usize,
        concat!("Alignment of ", stringify!(JSStaticValueEx))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSStaticValueEx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(JSStaticValueEx),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_getPropertyEx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSStaticValueEx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).getPropertyEx) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(JSStaticValueEx),
                "::",
                stringify!(getPropertyEx)
            )
        );
    }
    test_field_getPropertyEx();
    fn test_field_setPropertyEx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSStaticValueEx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).setPropertyEx) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(JSStaticValueEx),
                "::",
                stringify!(setPropertyEx)
            )
        );
    }
    test_field_setPropertyEx();
    fn test_field_attributes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSStaticValueEx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(JSStaticValueEx),
                "::",
                stringify!(attributes)
            )
        );
    }
    test_field_attributes();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSStaticFunction {
    pub name: *const ::std::os::raw::c_char,
    pub callAsFunction: JSObjectCallAsFunctionCallback,
    pub attributes: JSPropertyAttributes,
}
#[test]
fn bindgen_test_layout_JSStaticFunction() {
    assert_eq!(
        ::std::mem::size_of::<JSStaticFunction>(),
        24usize,
        concat!("Size of: ", stringify!(JSStaticFunction))
    );
    assert_eq!(
        ::std::mem::align_of::<JSStaticFunction>(),
        8usize,
        concat!("Alignment of ", stringify!(JSStaticFunction))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSStaticFunction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(JSStaticFunction),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_callAsFunction() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSStaticFunction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).callAsFunction) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(JSStaticFunction),
                "::",
                stringify!(callAsFunction)
            )
        );
    }
    test_field_callAsFunction();
    fn test_field_attributes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSStaticFunction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(JSStaticFunction),
                "::",
                stringify!(attributes)
            )
        );
    }
    test_field_attributes();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSStaticFunctionEx {
    pub name: *const ::std::os::raw::c_char,
    pub callAsFunctionEx: JSObjectCallAsFunctionCallbackEx,
    pub attributes: JSPropertyAttributes,
}
#[test]
fn bindgen_test_layout_JSStaticFunctionEx() {
    assert_eq!(
        ::std::mem::size_of::<JSStaticFunctionEx>(),
        24usize,
        concat!("Size of: ", stringify!(JSStaticFunctionEx))
    );
    assert_eq!(
        ::std::mem::align_of::<JSStaticFunctionEx>(),
        8usize,
        concat!("Alignment of ", stringify!(JSStaticFunctionEx))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSStaticFunctionEx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(JSStaticFunctionEx),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_callAsFunctionEx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSStaticFunctionEx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).callAsFunctionEx) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(JSStaticFunctionEx),
                "::",
                stringify!(callAsFunctionEx)
            )
        );
    }
    test_field_callAsFunctionEx();
    fn test_field_attributes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSStaticFunctionEx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(JSStaticFunctionEx),
                "::",
                stringify!(attributes)
            )
        );
    }
    test_field_attributes();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JSClassDefinition {
    pub version: ::std::os::raw::c_int,
    pub attributes: JSClassAttributes,
    pub className: *const ::std::os::raw::c_char,
    pub parentClass: JSClassRef,
    pub __bindgen_anon_1: JSClassDefinition__bindgen_ty_1,
    pub privateData: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JSClassDefinition__bindgen_ty_1 {
    pub __bindgen_anon_1: JSClassDefinition__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: JSClassDefinition__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSClassDefinition__bindgen_ty_1__bindgen_ty_1 {
    pub staticValues: *const JSStaticValue,
    pub staticFunctions: *const JSStaticFunction,
    pub initialize: JSObjectInitializeCallback,
    pub finalize: JSObjectFinalizeCallback,
    pub hasProperty: JSObjectHasPropertyCallback,
    pub getProperty: JSObjectGetPropertyCallback,
    pub setProperty: JSObjectSetPropertyCallback,
    pub deleteProperty: JSObjectDeletePropertyCallback,
    pub getPropertyNames: JSObjectGetPropertyNamesCallback,
    pub callAsFunction: JSObjectCallAsFunctionCallback,
    pub callAsConstructor: JSObjectCallAsConstructorCallback,
    pub hasInstance: JSObjectHasInstanceCallback,
    pub convertToType: JSObjectConvertToTypeCallback,
}
#[test]
fn bindgen_test_layout_JSClassDefinition__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<JSClassDefinition__bindgen_ty_1__bindgen_ty_1>(),
        104usize,
        concat!(
            "Size of: ",
            stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<JSClassDefinition__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_staticValues() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_1 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).staticValues) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(staticValues)
            )
        );
    }
    test_field_staticValues();
    fn test_field_staticFunctions() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_1 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).staticFunctions) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(staticFunctions)
            )
        );
    }
    test_field_staticFunctions();
    fn test_field_initialize() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_1 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).initialize) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(initialize)
            )
        );
    }
    test_field_initialize();
    fn test_field_finalize() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_1 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).finalize) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(finalize)
            )
        );
    }
    test_field_finalize();
    fn test_field_hasProperty() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_1 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hasProperty) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(hasProperty)
            )
        );
    }
    test_field_hasProperty();
    fn test_field_getProperty() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_1 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).getProperty) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(getProperty)
            )
        );
    }
    test_field_getProperty();
    fn test_field_setProperty() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_1 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).setProperty) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(setProperty)
            )
        );
    }
    test_field_setProperty();
    fn test_field_deleteProperty() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_1 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).deleteProperty) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(deleteProperty)
            )
        );
    }
    test_field_deleteProperty();
    fn test_field_getPropertyNames() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_1 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).getPropertyNames) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(getPropertyNames)
            )
        );
    }
    test_field_getPropertyNames();
    fn test_field_callAsFunction() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_1 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).callAsFunction) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(callAsFunction)
            )
        );
    }
    test_field_callAsFunction();
    fn test_field_callAsConstructor() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_1 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).callAsConstructor) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(callAsConstructor)
            )
        );
    }
    test_field_callAsConstructor();
    fn test_field_hasInstance() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_1 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hasInstance) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(hasInstance)
            )
        );
    }
    test_field_hasInstance();
    fn test_field_convertToType() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_1 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).convertToType) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(convertToType)
            )
        );
    }
    test_field_convertToType();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSClassDefinition__bindgen_ty_1__bindgen_ty_2 {
    pub staticValuesEx: *const JSStaticValueEx,
    pub staticFunctionsEx: *const JSStaticFunctionEx,
    pub initializeEx: JSObjectInitializeCallbackEx,
    pub finalizeEx: JSObjectFinalizeCallbackEx,
    pub hasPropertyEx: JSObjectHasPropertyCallbackEx,
    pub getPropertyEx: JSObjectGetPropertyCallbackEx,
    pub setPropertyEx: JSObjectSetPropertyCallbackEx,
    pub deletePropertyEx: JSObjectDeletePropertyCallbackEx,
    pub getPropertyNamesEx: JSObjectGetPropertyNamesCallbackEx,
    pub callAsFunctionEx: JSObjectCallAsFunctionCallbackEx,
    pub callAsConstructorEx: JSObjectCallAsConstructorCallbackEx,
    pub hasInstanceEx: JSObjectHasInstanceCallbackEx,
    pub convertToTypeEx: JSObjectConvertToTypeCallbackEx,
}
#[test]
fn bindgen_test_layout_JSClassDefinition__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<JSClassDefinition__bindgen_ty_1__bindgen_ty_2>(),
        104usize,
        concat!(
            "Size of: ",
            stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<JSClassDefinition__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_2)
        )
    );
    fn test_field_staticValuesEx() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_2 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).staticValuesEx) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(staticValuesEx)
            )
        );
    }
    test_field_staticValuesEx();
    fn test_field_staticFunctionsEx() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_2 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).staticFunctionsEx) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(staticFunctionsEx)
            )
        );
    }
    test_field_staticFunctionsEx();
    fn test_field_initializeEx() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_2 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).initializeEx) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(initializeEx)
            )
        );
    }
    test_field_initializeEx();
    fn test_field_finalizeEx() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_2 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).finalizeEx) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(finalizeEx)
            )
        );
    }
    test_field_finalizeEx();
    fn test_field_hasPropertyEx() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_2 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hasPropertyEx) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(hasPropertyEx)
            )
        );
    }
    test_field_hasPropertyEx();
    fn test_field_getPropertyEx() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_2 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).getPropertyEx) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(getPropertyEx)
            )
        );
    }
    test_field_getPropertyEx();
    fn test_field_setPropertyEx() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_2 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).setPropertyEx) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(setPropertyEx)
            )
        );
    }
    test_field_setPropertyEx();
    fn test_field_deletePropertyEx() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_2 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).deletePropertyEx) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(deletePropertyEx)
            )
        );
    }
    test_field_deletePropertyEx();
    fn test_field_getPropertyNamesEx() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_2 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).getPropertyNamesEx) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(getPropertyNamesEx)
            )
        );
    }
    test_field_getPropertyNamesEx();
    fn test_field_callAsFunctionEx() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_2 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).callAsFunctionEx) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(callAsFunctionEx)
            )
        );
    }
    test_field_callAsFunctionEx();
    fn test_field_callAsConstructorEx() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_2 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).callAsConstructorEx) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(callAsConstructorEx)
            )
        );
    }
    test_field_callAsConstructorEx();
    fn test_field_hasInstanceEx() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_2 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hasInstanceEx) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(hasInstanceEx)
            )
        );
    }
    test_field_hasInstanceEx();
    fn test_field_convertToTypeEx() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < JSClassDefinition__bindgen_ty_1__bindgen_ty_2 > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).convertToTypeEx) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(convertToTypeEx)
            )
        );
    }
    test_field_convertToTypeEx();
}
#[test]
fn bindgen_test_layout_JSClassDefinition__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<JSClassDefinition__bindgen_ty_1>(),
        104usize,
        concat!("Size of: ", stringify!(JSClassDefinition__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<JSClassDefinition__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(JSClassDefinition__bindgen_ty_1))
    );
}
impl ::std::fmt::Debug for JSClassDefinition__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "JSClassDefinition__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_JSClassDefinition() {
    assert_eq!(
        ::std::mem::size_of::<JSClassDefinition>(),
        136usize,
        concat!("Size of: ", stringify!(JSClassDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<JSClassDefinition>(),
        8usize,
        concat!("Alignment of ", stringify!(JSClassDefinition))
    );
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSClassDefinition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
    fn test_field_attributes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSClassDefinition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition),
                "::",
                stringify!(attributes)
            )
        );
    }
    test_field_attributes();
    fn test_field_className() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSClassDefinition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).className) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition),
                "::",
                stringify!(className)
            )
        );
    }
    test_field_className();
    fn test_field_parentClass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSClassDefinition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).parentClass) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition),
                "::",
                stringify!(parentClass)
            )
        );
    }
    test_field_parentClass();
    fn test_field_privateData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JSClassDefinition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).privateData) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(JSClassDefinition),
                "::",
                stringify!(privateData)
            )
        );
    }
    test_field_privateData();
}
impl ::std::fmt::Debug for JSClassDefinition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "JSClassDefinition {{ version: {:?}, attributes: {:?}, className: {:?}, parentClass: {:?}, __bindgen_anon_1: {:?}, privateData: {:?} }}" , self . version , self . attributes , self . className , self . parentClass , self . __bindgen_anon_1 , self . privateData)
    }
}
extern "C" {
    pub static kJSClassDefinitionEmpty: JSClassDefinition;
}
extern "C" {
    pub fn JSClassCreate(definition: *const JSClassDefinition) -> JSClassRef;
}
extern "C" {
    pub fn JSClassRetain(jsClass: JSClassRef) -> JSClassRef;
}
extern "C" {
    pub fn JSClassRelease(jsClass: JSClassRef);
}
extern "C" {
    pub fn JSClassGetPrivate(jsClass: JSClassRef) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn JSClassSetPrivate(jsClass: JSClassRef, data: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn JSObjectMake(
        ctx: JSContextRef,
        jsClass: JSClassRef,
        data: *mut ::std::os::raw::c_void,
    ) -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeFunctionWithCallback(
        ctx: JSContextRef,
        name: JSStringRef,
        callAsFunction: JSObjectCallAsFunctionCallback,
    ) -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeConstructor(
        ctx: JSContextRef,
        jsClass: JSClassRef,
        callAsConstructor: JSObjectCallAsConstructorCallback,
    ) -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeArray(
        ctx: JSContextRef,
        argumentCount: size_t,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeDate(
        ctx: JSContextRef,
        argumentCount: size_t,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeError(
        ctx: JSContextRef,
        argumentCount: size_t,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeRegExp(
        ctx: JSContextRef,
        argumentCount: size_t,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeDeferredPromise(
        ctx: JSContextRef,
        resolve: *mut JSObjectRef,
        reject: *mut JSObjectRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeFunction(
        ctx: JSContextRef,
        name: JSStringRef,
        parameterCount: ::std::os::raw::c_uint,
        parameterNames: *const JSStringRef,
        body: JSStringRef,
        sourceURL: JSStringRef,
        startingLineNumber: ::std::os::raw::c_int,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectGetPrototype(ctx: JSContextRef, object: JSObjectRef) -> JSValueRef;
}
extern "C" {
    pub fn JSObjectSetPrototype(ctx: JSContextRef, object: JSObjectRef, value: JSValueRef);
}
extern "C" {
    pub fn JSObjectHasProperty(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
    ) -> bool;
}
extern "C" {
    pub fn JSObjectGetProperty(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
        exception: *mut JSValueRef,
    ) -> JSValueRef;
}
extern "C" {
    pub fn JSObjectSetProperty(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
        value: JSValueRef,
        attributes: JSPropertyAttributes,
        exception: *mut JSValueRef,
    );
}
extern "C" {
    pub fn JSObjectDeleteProperty(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
        exception: *mut JSValueRef,
    ) -> bool;
}
extern "C" {
    pub fn JSObjectHasPropertyForKey(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyKey: JSValueRef,
        exception: *mut JSValueRef,
    ) -> bool;
}
extern "C" {
    pub fn JSObjectGetPropertyForKey(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyKey: JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSValueRef;
}
extern "C" {
    pub fn JSObjectSetPropertyForKey(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyKey: JSValueRef,
        value: JSValueRef,
        attributes: JSPropertyAttributes,
        exception: *mut JSValueRef,
    );
}
extern "C" {
    pub fn JSObjectDeletePropertyForKey(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyKey: JSValueRef,
        exception: *mut JSValueRef,
    ) -> bool;
}
extern "C" {
    pub fn JSObjectGetPropertyAtIndex(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyIndex: ::std::os::raw::c_uint,
        exception: *mut JSValueRef,
    ) -> JSValueRef;
}
extern "C" {
    pub fn JSObjectSetPropertyAtIndex(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyIndex: ::std::os::raw::c_uint,
        value: JSValueRef,
        exception: *mut JSValueRef,
    );
}
extern "C" {
    pub fn JSObjectGetPrivate(object: JSObjectRef) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn JSObjectSetPrivate(object: JSObjectRef, data: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn JSObjectIsFunction(ctx: JSContextRef, object: JSObjectRef) -> bool;
}
extern "C" {
    pub fn JSObjectCallAsFunction(
        ctx: JSContextRef,
        object: JSObjectRef,
        thisObject: JSObjectRef,
        argumentCount: size_t,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSValueRef;
}
extern "C" {
    pub fn JSObjectIsConstructor(ctx: JSContextRef, object: JSObjectRef) -> bool;
}
extern "C" {
    pub fn JSObjectCallAsConstructor(
        ctx: JSContextRef,
        object: JSObjectRef,
        argumentCount: size_t,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectCopyPropertyNames(
        ctx: JSContextRef,
        object: JSObjectRef,
    ) -> JSPropertyNameArrayRef;
}
extern "C" {
    pub fn JSPropertyNameArrayRetain(array: JSPropertyNameArrayRef) -> JSPropertyNameArrayRef;
}
extern "C" {
    pub fn JSPropertyNameArrayRelease(array: JSPropertyNameArrayRef);
}
extern "C" {
    pub fn JSPropertyNameArrayGetCount(array: JSPropertyNameArrayRef) -> size_t;
}
extern "C" {
    pub fn JSPropertyNameArrayGetNameAtIndex(
        array: JSPropertyNameArrayRef,
        index: size_t,
    ) -> JSStringRef;
}
extern "C" {
    pub fn JSPropertyNameAccumulatorAddName(
        accumulator: JSPropertyNameAccumulatorRef,
        propertyName: JSStringRef,
    );
}
extern "C" {
    pub fn JSContextGroupCreate() -> JSContextGroupRef;
}
extern "C" {
    pub fn JSContextGroupRetain(group: JSContextGroupRef) -> JSContextGroupRef;
}
extern "C" {
    pub fn JSContextGroupRelease(group: JSContextGroupRef);
}
extern "C" {
    pub fn JSGlobalContextCreate(globalObjectClass: JSClassRef) -> JSGlobalContextRef;
}
extern "C" {
    pub fn JSGlobalContextCreateInGroup(
        group: JSContextGroupRef,
        globalObjectClass: JSClassRef,
    ) -> JSGlobalContextRef;
}
extern "C" {
    pub fn JSGlobalContextRetain(ctx: JSGlobalContextRef) -> JSGlobalContextRef;
}
extern "C" {
    pub fn JSGlobalContextRelease(ctx: JSGlobalContextRef);
}
extern "C" {
    pub fn JSContextGetGlobalObject(ctx: JSContextRef) -> JSObjectRef;
}
extern "C" {
    pub fn JSContextGetGroup(ctx: JSContextRef) -> JSContextGroupRef;
}
extern "C" {
    pub fn JSContextGetGlobalContext(ctx: JSContextRef) -> JSGlobalContextRef;
}
extern "C" {
    pub fn JSGlobalContextCopyName(ctx: JSGlobalContextRef) -> JSStringRef;
}
extern "C" {
    pub fn JSGlobalContextSetName(ctx: JSGlobalContextRef, name: JSStringRef);
}
pub type JSChar = wchar_t;
extern "C" {
    pub fn JSStringCreateWithCharacters(chars: *const JSChar, numChars: size_t) -> JSStringRef;
}
extern "C" {
    pub fn JSStringCreateWithUTF8CString(string: *const ::std::os::raw::c_char) -> JSStringRef;
}
extern "C" {
    pub fn JSStringRetain(string: JSStringRef) -> JSStringRef;
}
extern "C" {
    pub fn JSStringRelease(string: JSStringRef);
}
extern "C" {
    pub fn JSStringGetLength(string: JSStringRef) -> size_t;
}
extern "C" {
    pub fn JSStringGetCharactersPtr(string: JSStringRef) -> *const JSChar;
}
extern "C" {
    pub fn JSStringGetMaximumUTF8CStringSize(string: JSStringRef) -> size_t;
}
extern "C" {
    pub fn JSStringGetUTF8CString(
        string: JSStringRef,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn JSStringIsEqual(a: JSStringRef, b: JSStringRef) -> bool;
}
extern "C" {
    pub fn JSStringIsEqualToUTF8CString(a: JSStringRef, b: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn JSObjectMakeTypedArray(
        ctx: JSContextRef,
        arrayType: JSTypedArrayType,
        length: size_t,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeTypedArrayWithBytesNoCopy(
        ctx: JSContextRef,
        arrayType: JSTypedArrayType,
        bytes: *mut ::std::os::raw::c_void,
        byteLength: size_t,
        bytesDeallocator: JSTypedArrayBytesDeallocator,
        deallocatorContext: *mut ::std::os::raw::c_void,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeTypedArrayWithArrayBuffer(
        ctx: JSContextRef,
        arrayType: JSTypedArrayType,
        buffer: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeTypedArrayWithArrayBufferAndOffset(
        ctx: JSContextRef,
        arrayType: JSTypedArrayType,
        buffer: JSObjectRef,
        byteOffset: size_t,
        length: size_t,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectGetTypedArrayBytesPtr(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn JSObjectGetTypedArrayLength(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> size_t;
}
extern "C" {
    pub fn JSObjectGetTypedArrayByteLength(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> size_t;
}
extern "C" {
    pub fn JSObjectGetTypedArrayByteOffset(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> size_t;
}
extern "C" {
    pub fn JSObjectGetTypedArrayBuffer(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectMakeArrayBufferWithBytesNoCopy(
        ctx: JSContextRef,
        bytes: *mut ::std::os::raw::c_void,
        byteLength: size_t,
        bytesDeallocator: JSTypedArrayBytesDeallocator,
        deallocatorContext: *mut ::std::os::raw::c_void,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    pub fn JSObjectGetArrayBufferBytesPtr(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn JSObjectGetArrayBufferByteLength(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> size_t;
}
pub type ULChar16 = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_Config {
    _unused: [u8; 0],
}
pub type ULConfig = *mut C_Config;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_Renderer {
    _unused: [u8; 0],
}
pub type ULRenderer = *mut C_Renderer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_Session {
    _unused: [u8; 0],
}
pub type ULSession = *mut C_Session;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_ViewConfig {
    _unused: [u8; 0],
}
pub type ULViewConfig = *mut C_ViewConfig;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_View {
    _unused: [u8; 0],
}
pub type ULView = *mut C_View;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_Bitmap {
    _unused: [u8; 0],
}
pub type ULBitmap = *mut C_Bitmap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_String {
    _unused: [u8; 0],
}
pub type ULString = *mut C_String;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_Buffer {
    _unused: [u8; 0],
}
pub type ULBuffer = *mut C_Buffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_KeyEvent {
    _unused: [u8; 0],
}
pub type ULKeyEvent = *mut C_KeyEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_MouseEvent {
    _unused: [u8; 0],
}
pub type ULMouseEvent = *mut C_MouseEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_ScrollEvent {
    _unused: [u8; 0],
}
pub type ULScrollEvent = *mut C_ScrollEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_Surface {
    _unused: [u8; 0],
}
pub type ULSurface = *mut C_Surface;
pub type ULBitmapSurface = *mut C_Surface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_FontFile {
    _unused: [u8; 0],
}
pub type ULFontFile = *mut C_FontFile;
pub const ULMessageSource_kMessageSource_XML: ULMessageSource = 0;
pub const ULMessageSource_kMessageSource_JS: ULMessageSource = 1;
pub const ULMessageSource_kMessageSource_Network: ULMessageSource = 2;
pub const ULMessageSource_kMessageSource_ConsoleAPI: ULMessageSource = 3;
pub const ULMessageSource_kMessageSource_Storage: ULMessageSource = 4;
pub const ULMessageSource_kMessageSource_AppCache: ULMessageSource = 5;
pub const ULMessageSource_kMessageSource_Rendering: ULMessageSource = 6;
pub const ULMessageSource_kMessageSource_CSS: ULMessageSource = 7;
pub const ULMessageSource_kMessageSource_Security: ULMessageSource = 8;
pub const ULMessageSource_kMessageSource_ContentBlocker: ULMessageSource = 9;
pub const ULMessageSource_kMessageSource_Other: ULMessageSource = 10;
pub type ULMessageSource = ::std::os::raw::c_int;
pub const ULMessageLevel_kMessageLevel_Log: ULMessageLevel = 1;
pub const ULMessageLevel_kMessageLevel_Warning: ULMessageLevel = 2;
pub const ULMessageLevel_kMessageLevel_Error: ULMessageLevel = 3;
pub const ULMessageLevel_kMessageLevel_Debug: ULMessageLevel = 4;
pub const ULMessageLevel_kMessageLevel_Info: ULMessageLevel = 5;
pub type ULMessageLevel = ::std::os::raw::c_int;
pub const ULCursor_kCursor_Pointer: ULCursor = 0;
pub const ULCursor_kCursor_Cross: ULCursor = 1;
pub const ULCursor_kCursor_Hand: ULCursor = 2;
pub const ULCursor_kCursor_IBeam: ULCursor = 3;
pub const ULCursor_kCursor_Wait: ULCursor = 4;
pub const ULCursor_kCursor_Help: ULCursor = 5;
pub const ULCursor_kCursor_EastResize: ULCursor = 6;
pub const ULCursor_kCursor_NorthResize: ULCursor = 7;
pub const ULCursor_kCursor_NorthEastResize: ULCursor = 8;
pub const ULCursor_kCursor_NorthWestResize: ULCursor = 9;
pub const ULCursor_kCursor_SouthResize: ULCursor = 10;
pub const ULCursor_kCursor_SouthEastResize: ULCursor = 11;
pub const ULCursor_kCursor_SouthWestResize: ULCursor = 12;
pub const ULCursor_kCursor_WestResize: ULCursor = 13;
pub const ULCursor_kCursor_NorthSouthResize: ULCursor = 14;
pub const ULCursor_kCursor_EastWestResize: ULCursor = 15;
pub const ULCursor_kCursor_NorthEastSouthWestResize: ULCursor = 16;
pub const ULCursor_kCursor_NorthWestSouthEastResize: ULCursor = 17;
pub const ULCursor_kCursor_ColumnResize: ULCursor = 18;
pub const ULCursor_kCursor_RowResize: ULCursor = 19;
pub const ULCursor_kCursor_MiddlePanning: ULCursor = 20;
pub const ULCursor_kCursor_EastPanning: ULCursor = 21;
pub const ULCursor_kCursor_NorthPanning: ULCursor = 22;
pub const ULCursor_kCursor_NorthEastPanning: ULCursor = 23;
pub const ULCursor_kCursor_NorthWestPanning: ULCursor = 24;
pub const ULCursor_kCursor_SouthPanning: ULCursor = 25;
pub const ULCursor_kCursor_SouthEastPanning: ULCursor = 26;
pub const ULCursor_kCursor_SouthWestPanning: ULCursor = 27;
pub const ULCursor_kCursor_WestPanning: ULCursor = 28;
pub const ULCursor_kCursor_Move: ULCursor = 29;
pub const ULCursor_kCursor_VerticalText: ULCursor = 30;
pub const ULCursor_kCursor_Cell: ULCursor = 31;
pub const ULCursor_kCursor_ContextMenu: ULCursor = 32;
pub const ULCursor_kCursor_Alias: ULCursor = 33;
pub const ULCursor_kCursor_Progress: ULCursor = 34;
pub const ULCursor_kCursor_NoDrop: ULCursor = 35;
pub const ULCursor_kCursor_Copy: ULCursor = 36;
pub const ULCursor_kCursor_None: ULCursor = 37;
pub const ULCursor_kCursor_NotAllowed: ULCursor = 38;
pub const ULCursor_kCursor_ZoomIn: ULCursor = 39;
pub const ULCursor_kCursor_ZoomOut: ULCursor = 40;
pub const ULCursor_kCursor_Grab: ULCursor = 41;
pub const ULCursor_kCursor_Grabbing: ULCursor = 42;
pub const ULCursor_kCursor_Custom: ULCursor = 43;
pub type ULCursor = ::std::os::raw::c_int;
pub const ULBitmapFormat_kBitmapFormat_A8_UNORM: ULBitmapFormat = 0;
pub const ULBitmapFormat_kBitmapFormat_BGRA8_UNORM_SRGB: ULBitmapFormat = 1;
pub type ULBitmapFormat = ::std::os::raw::c_int;
pub const ULKeyEventType_kKeyEventType_KeyDown: ULKeyEventType = 0;
pub const ULKeyEventType_kKeyEventType_KeyUp: ULKeyEventType = 1;
pub const ULKeyEventType_kKeyEventType_RawKeyDown: ULKeyEventType = 2;
pub const ULKeyEventType_kKeyEventType_Char: ULKeyEventType = 3;
pub type ULKeyEventType = ::std::os::raw::c_int;
pub const ULMouseEventType_kMouseEventType_MouseMoved: ULMouseEventType = 0;
pub const ULMouseEventType_kMouseEventType_MouseDown: ULMouseEventType = 1;
pub const ULMouseEventType_kMouseEventType_MouseUp: ULMouseEventType = 2;
pub type ULMouseEventType = ::std::os::raw::c_int;
pub const ULMouseButton_kMouseButton_None: ULMouseButton = 0;
pub const ULMouseButton_kMouseButton_Left: ULMouseButton = 1;
pub const ULMouseButton_kMouseButton_Middle: ULMouseButton = 2;
pub const ULMouseButton_kMouseButton_Right: ULMouseButton = 3;
pub type ULMouseButton = ::std::os::raw::c_int;
pub const ULScrollEventType_kScrollEventType_ScrollByPixel: ULScrollEventType = 0;
pub const ULScrollEventType_kScrollEventType_ScrollByPage: ULScrollEventType = 1;
pub type ULScrollEventType = ::std::os::raw::c_int;
pub const ULFaceWinding_kFaceWinding_Clockwise: ULFaceWinding = 0;
pub const ULFaceWinding_kFaceWinding_CounterClockwise: ULFaceWinding = 1;
pub type ULFaceWinding = ::std::os::raw::c_int;
pub const ULFontHinting_kFontHinting_Smooth: ULFontHinting = 0;
pub const ULFontHinting_kFontHinting_Normal: ULFontHinting = 1;
pub const ULFontHinting_kFontHinting_Monochrome: ULFontHinting = 2;
pub type ULFontHinting = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ULRect {
    pub left: f32,
    pub top: f32,
    pub right: f32,
    pub bottom: f32,
}
#[test]
fn bindgen_test_layout_ULRect() {
    assert_eq!(
        ::std::mem::size_of::<ULRect>(),
        16usize,
        concat!("Size of: ", stringify!(ULRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ULRect>(),
        4usize,
        concat!("Alignment of ", stringify!(ULRect))
    );
    fn test_field_left() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRect),
                "::",
                stringify!(left)
            )
        );
    }
    test_field_left();
    fn test_field_top() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRect),
                "::",
                stringify!(top)
            )
        );
    }
    test_field_top();
    fn test_field_right() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRect),
                "::",
                stringify!(right)
            )
        );
    }
    test_field_right();
    fn test_field_bottom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bottom) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRect),
                "::",
                stringify!(bottom)
            )
        );
    }
    test_field_bottom();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ULIntRect {
    pub left: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ULIntRect() {
    assert_eq!(
        ::std::mem::size_of::<ULIntRect>(),
        16usize,
        concat!("Size of: ", stringify!(ULIntRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ULIntRect>(),
        4usize,
        concat!("Alignment of ", stringify!(ULIntRect))
    );
    fn test_field_left() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULIntRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULIntRect),
                "::",
                stringify!(left)
            )
        );
    }
    test_field_left();
    fn test_field_top() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULIntRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ULIntRect),
                "::",
                stringify!(top)
            )
        );
    }
    test_field_top();
    fn test_field_right() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULIntRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ULIntRect),
                "::",
                stringify!(right)
            )
        );
    }
    test_field_right();
    fn test_field_bottom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULIntRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bottom) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ULIntRect),
                "::",
                stringify!(bottom)
            )
        );
    }
    test_field_bottom();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ULRenderTarget {
    pub is_empty: bool,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub texture_id: ::std::os::raw::c_uint,
    pub texture_width: ::std::os::raw::c_uint,
    pub texture_height: ::std::os::raw::c_uint,
    pub texture_format: ULBitmapFormat,
    pub uv_coords: ULRect,
    pub render_buffer_id: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ULRenderTarget() {
    assert_eq!(
        ::std::mem::size_of::<ULRenderTarget>(),
        48usize,
        concat!("Size of: ", stringify!(ULRenderTarget))
    );
    assert_eq!(
        ::std::mem::align_of::<ULRenderTarget>(),
        4usize,
        concat!("Alignment of ", stringify!(ULRenderTarget))
    );
    fn test_field_is_empty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRenderTarget>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).is_empty) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRenderTarget),
                "::",
                stringify!(is_empty)
            )
        );
    }
    test_field_is_empty();
    fn test_field_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRenderTarget>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRenderTarget),
                "::",
                stringify!(width)
            )
        );
    }
    test_field_width();
    fn test_field_height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRenderTarget>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRenderTarget),
                "::",
                stringify!(height)
            )
        );
    }
    test_field_height();
    fn test_field_texture_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRenderTarget>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_id) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRenderTarget),
                "::",
                stringify!(texture_id)
            )
        );
    }
    test_field_texture_id();
    fn test_field_texture_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRenderTarget>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_width) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRenderTarget),
                "::",
                stringify!(texture_width)
            )
        );
    }
    test_field_texture_width();
    fn test_field_texture_height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRenderTarget>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_height) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRenderTarget),
                "::",
                stringify!(texture_height)
            )
        );
    }
    test_field_texture_height();
    fn test_field_texture_format() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRenderTarget>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_format) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRenderTarget),
                "::",
                stringify!(texture_format)
            )
        );
    }
    test_field_texture_format();
    fn test_field_uv_coords() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRenderTarget>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uv_coords) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRenderTarget),
                "::",
                stringify!(uv_coords)
            )
        );
    }
    test_field_uv_coords();
    fn test_field_render_buffer_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRenderTarget>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).render_buffer_id) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRenderTarget),
                "::",
                stringify!(render_buffer_id)
            )
        );
    }
    test_field_render_buffer_id();
}
extern "C" {
    pub fn ulVersionString() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ulVersionMajor() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ulVersionMinor() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ulVersionPatch() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ulCreateEmptyBitmap() -> ULBitmap;
}
extern "C" {
    pub fn ulCreateBitmap(
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        format: ULBitmapFormat,
    ) -> ULBitmap;
}
extern "C" {
    pub fn ulCreateBitmapFromPixels(
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        format: ULBitmapFormat,
        row_bytes: ::std::os::raw::c_uint,
        pixels: *const ::std::os::raw::c_void,
        size: size_t,
        should_copy: bool,
    ) -> ULBitmap;
}
extern "C" {
    pub fn ulCreateBitmapFromCopy(existing_bitmap: ULBitmap) -> ULBitmap;
}
extern "C" {
    pub fn ulDestroyBitmap(bitmap: ULBitmap);
}
extern "C" {
    pub fn ulBitmapGetWidth(bitmap: ULBitmap) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ulBitmapGetHeight(bitmap: ULBitmap) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ulBitmapGetFormat(bitmap: ULBitmap) -> ULBitmapFormat;
}
extern "C" {
    pub fn ulBitmapGetBpp(bitmap: ULBitmap) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ulBitmapGetRowBytes(bitmap: ULBitmap) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ulBitmapGetSize(bitmap: ULBitmap) -> size_t;
}
extern "C" {
    pub fn ulBitmapOwnsPixels(bitmap: ULBitmap) -> bool;
}
extern "C" {
    pub fn ulBitmapLockPixels(bitmap: ULBitmap) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ulBitmapUnlockPixels(bitmap: ULBitmap);
}
extern "C" {
    pub fn ulBitmapRawPixels(bitmap: ULBitmap) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ulBitmapIsEmpty(bitmap: ULBitmap) -> bool;
}
extern "C" {
    pub fn ulBitmapErase(bitmap: ULBitmap);
}
extern "C" {
    pub fn ulBitmapWritePNG(bitmap: ULBitmap, path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ulBitmapSwapRedBlueChannels(bitmap: ULBitmap);
}
pub type ulDestroyBufferCallback = ::std::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void, data: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn ulCreateBuffer(
        data: *mut ::std::os::raw::c_void,
        size: size_t,
        user_data: *mut ::std::os::raw::c_void,
        destruction_callback: ulDestroyBufferCallback,
    ) -> ULBuffer;
}
extern "C" {
    pub fn ulCreateBufferFromCopy(data: *const ::std::os::raw::c_void, size: size_t) -> ULBuffer;
}
extern "C" {
    pub fn ulDestroyBuffer(buffer: ULBuffer);
}
extern "C" {
    pub fn ulBufferGetData(buffer: ULBuffer) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ulBufferGetSize(buffer: ULBuffer) -> size_t;
}
extern "C" {
    pub fn ulBufferGetUserData(buffer: ULBuffer) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ulBufferOwnsData(buffer: ULBuffer) -> bool;
}
pub type ULClipboardClearCallback = ::std::option::Option<unsafe extern "C" fn()>;
pub type ULClipboardReadPlainTextCallback =
    ::std::option::Option<unsafe extern "C" fn(result: ULString)>;
pub type ULClipboardWritePlainTextCallback =
    ::std::option::Option<unsafe extern "C" fn(text: ULString)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ULClipboard {
    pub clear: ULClipboardClearCallback,
    pub read_plain_text: ULClipboardReadPlainTextCallback,
    pub write_plain_text: ULClipboardWritePlainTextCallback,
}
#[test]
fn bindgen_test_layout_ULClipboard() {
    assert_eq!(
        ::std::mem::size_of::<ULClipboard>(),
        24usize,
        concat!("Size of: ", stringify!(ULClipboard))
    );
    assert_eq!(
        ::std::mem::align_of::<ULClipboard>(),
        8usize,
        concat!("Alignment of ", stringify!(ULClipboard))
    );
    fn test_field_clear() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULClipboard>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).clear) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULClipboard),
                "::",
                stringify!(clear)
            )
        );
    }
    test_field_clear();
    fn test_field_read_plain_text() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULClipboard>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).read_plain_text) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ULClipboard),
                "::",
                stringify!(read_plain_text)
            )
        );
    }
    test_field_read_plain_text();
    fn test_field_write_plain_text() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULClipboard>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).write_plain_text) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ULClipboard),
                "::",
                stringify!(write_plain_text)
            )
        );
    }
    test_field_write_plain_text();
}
extern "C" {
    pub fn ulCreateConfig() -> ULConfig;
}
extern "C" {
    pub fn ulDestroyConfig(config: ULConfig);
}
extern "C" {
    pub fn ulConfigSetCachePath(config: ULConfig, cache_path: ULString);
}
extern "C" {
    pub fn ulConfigSetResourcePathPrefix(config: ULConfig, resource_path_prefix: ULString);
}
extern "C" {
    pub fn ulConfigSetFaceWinding(config: ULConfig, winding: ULFaceWinding);
}
extern "C" {
    pub fn ulConfigSetFontHinting(config: ULConfig, font_hinting: ULFontHinting);
}
extern "C" {
    pub fn ulConfigSetFontGamma(config: ULConfig, font_gamma: f64);
}
extern "C" {
    pub fn ulConfigSetUserStylesheet(config: ULConfig, css_string: ULString);
}
extern "C" {
    pub fn ulConfigSetForceRepaint(config: ULConfig, enabled: bool);
}
extern "C" {
    pub fn ulConfigSetAnimationTimerDelay(config: ULConfig, delay: f64);
}
extern "C" {
    pub fn ulConfigSetScrollTimerDelay(config: ULConfig, delay: f64);
}
extern "C" {
    pub fn ulConfigSetRecycleDelay(config: ULConfig, delay: f64);
}
extern "C" {
    pub fn ulConfigSetMemoryCacheSize(config: ULConfig, size: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn ulConfigSetPageCacheSize(config: ULConfig, size: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn ulConfigSetOverrideRAMSize(config: ULConfig, size: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn ulConfigSetMinLargeHeapSize(config: ULConfig, size: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn ulConfigSetMinSmallHeapSize(config: ULConfig, size: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn ulConfigSetNumRendererThreads(
        config: ULConfig,
        num_renderer_threads: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn ulConfigSetMaxUpdateTime(config: ULConfig, max_update_time: f64);
}
extern "C" {
    pub fn ulConfigSetBitmapAlignment(config: ULConfig, bitmap_alignment: f64);
}
pub type ULFileSystemFileExistsCallback =
    ::std::option::Option<unsafe extern "C" fn(path: ULString) -> bool>;
pub type ULFileSystemGetFileMimeTypeCallback =
    ::std::option::Option<unsafe extern "C" fn(path: ULString) -> ULString>;
pub type ULFileSystemGetFileCharsetCallback =
    ::std::option::Option<unsafe extern "C" fn(path: ULString) -> ULString>;
pub type ULFileSystemOpenFileCallback =
    ::std::option::Option<unsafe extern "C" fn(path: ULString) -> ULBuffer>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ULFileSystem {
    pub file_exists: ULFileSystemFileExistsCallback,
    pub get_file_mime_type: ULFileSystemGetFileMimeTypeCallback,
    pub get_file_charset: ULFileSystemGetFileCharsetCallback,
    pub open_file: ULFileSystemOpenFileCallback,
}
#[test]
fn bindgen_test_layout_ULFileSystem() {
    assert_eq!(
        ::std::mem::size_of::<ULFileSystem>(),
        32usize,
        concat!("Size of: ", stringify!(ULFileSystem))
    );
    assert_eq!(
        ::std::mem::align_of::<ULFileSystem>(),
        8usize,
        concat!("Alignment of ", stringify!(ULFileSystem))
    );
    fn test_field_file_exists() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULFileSystem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).file_exists) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULFileSystem),
                "::",
                stringify!(file_exists)
            )
        );
    }
    test_field_file_exists();
    fn test_field_get_file_mime_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULFileSystem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_file_mime_type) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ULFileSystem),
                "::",
                stringify!(get_file_mime_type)
            )
        );
    }
    test_field_get_file_mime_type();
    fn test_field_get_file_charset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULFileSystem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_file_charset) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ULFileSystem),
                "::",
                stringify!(get_file_charset)
            )
        );
    }
    test_field_get_file_charset();
    fn test_field_open_file() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULFileSystem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).open_file) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ULFileSystem),
                "::",
                stringify!(open_file)
            )
        );
    }
    test_field_open_file();
}
extern "C" {
    pub fn ulCreateString(str_: *const ::std::os::raw::c_char) -> ULString;
}
extern "C" {
    pub fn ulCreateStringUTF8(str_: *const ::std::os::raw::c_char, len: size_t) -> ULString;
}
extern "C" {
    pub fn ulCreateStringUTF16(str_: *mut ULChar16, len: size_t) -> ULString;
}
extern "C" {
    pub fn ulCreateStringFromCopy(str_: ULString) -> ULString;
}
extern "C" {
    pub fn ulDestroyString(str_: ULString);
}
extern "C" {
    pub fn ulStringGetData(str_: ULString) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ulStringGetLength(str_: ULString) -> size_t;
}
extern "C" {
    pub fn ulStringIsEmpty(str_: ULString) -> bool;
}
extern "C" {
    pub fn ulStringAssignString(str_: ULString, new_str: ULString);
}
extern "C" {
    pub fn ulStringAssignCString(str_: ULString, c_str: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ulFontFileCreateFromFilePath(file_path: ULString) -> ULFontFile;
}
extern "C" {
    pub fn ulFontFileCreateFromBuffer(buffer: ULBuffer) -> ULFontFile;
}
extern "C" {
    pub fn ulDestroyFontFile(font_file: ULFontFile);
}
pub type ULFontLoaderGetFallbackFont = ::std::option::Option<unsafe extern "C" fn() -> ULString>;
pub type ULFontLoaderGetFallbackFontForCharacters = ::std::option::Option<
    unsafe extern "C" fn(
        characters: ULString,
        weight: ::std::os::raw::c_int,
        italic: bool,
    ) -> ULString,
>;
pub type ULFontLoaderLoad = ::std::option::Option<
    unsafe extern "C" fn(
        family: ULString,
        weight: ::std::os::raw::c_int,
        italic: bool,
    ) -> ULFontFile,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ULFontLoader {
    pub get_fallback_font: ULFontLoaderGetFallbackFont,
    pub get_fallback_font_for_characters: ULFontLoaderGetFallbackFontForCharacters,
    pub load: ULFontLoaderLoad,
}
#[test]
fn bindgen_test_layout_ULFontLoader() {
    assert_eq!(
        ::std::mem::size_of::<ULFontLoader>(),
        24usize,
        concat!("Size of: ", stringify!(ULFontLoader))
    );
    assert_eq!(
        ::std::mem::align_of::<ULFontLoader>(),
        8usize,
        concat!("Alignment of ", stringify!(ULFontLoader))
    );
    fn test_field_get_fallback_font() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULFontLoader>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_fallback_font) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULFontLoader),
                "::",
                stringify!(get_fallback_font)
            )
        );
    }
    test_field_get_fallback_font();
    fn test_field_get_fallback_font_for_characters() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULFontLoader>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_fallback_font_for_characters) as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ULFontLoader),
                "::",
                stringify!(get_fallback_font_for_characters)
            )
        );
    }
    test_field_get_fallback_font_for_characters();
    fn test_field_load() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULFontLoader>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).load) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ULFontLoader),
                "::",
                stringify!(load)
            )
        );
    }
    test_field_load();
}
extern "C" {
    pub fn ulRectIsEmpty(rect: ULRect) -> bool;
}
extern "C" {
    pub fn ulRectMakeEmpty() -> ULRect;
}
extern "C" {
    pub fn ulIntRectIsEmpty(rect: ULIntRect) -> bool;
}
extern "C" {
    pub fn ulIntRectMakeEmpty() -> ULIntRect;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ULRenderBuffer {
    pub texture_id: ::std::os::raw::c_uint,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub has_stencil_buffer: bool,
    pub has_depth_buffer: bool,
}
#[test]
fn bindgen_test_layout_ULRenderBuffer() {
    assert_eq!(
        ::std::mem::size_of::<ULRenderBuffer>(),
        16usize,
        concat!("Size of: ", stringify!(ULRenderBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ULRenderBuffer>(),
        4usize,
        concat!("Alignment of ", stringify!(ULRenderBuffer))
    );
    fn test_field_texture_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRenderBuffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRenderBuffer),
                "::",
                stringify!(texture_id)
            )
        );
    }
    test_field_texture_id();
    fn test_field_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRenderBuffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRenderBuffer),
                "::",
                stringify!(width)
            )
        );
    }
    test_field_width();
    fn test_field_height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRenderBuffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRenderBuffer),
                "::",
                stringify!(height)
            )
        );
    }
    test_field_height();
    fn test_field_has_stencil_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRenderBuffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).has_stencil_buffer) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRenderBuffer),
                "::",
                stringify!(has_stencil_buffer)
            )
        );
    }
    test_field_has_stencil_buffer();
    fn test_field_has_depth_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULRenderBuffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).has_depth_buffer) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(ULRenderBuffer),
                "::",
                stringify!(has_depth_buffer)
            )
        );
    }
    test_field_has_depth_buffer();
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ULVertex_2f_4ub_2f {
    pub pos: [f32; 2usize],
    pub color: [::std::os::raw::c_uchar; 4usize],
    pub obj: [f32; 2usize],
}
#[test]
fn bindgen_test_layout_ULVertex_2f_4ub_2f() {
    assert_eq!(
        ::std::mem::size_of::<ULVertex_2f_4ub_2f>(),
        20usize,
        concat!("Size of: ", stringify!(ULVertex_2f_4ub_2f))
    );
    assert_eq!(
        ::std::mem::align_of::<ULVertex_2f_4ub_2f>(),
        1usize,
        concat!("Alignment of ", stringify!(ULVertex_2f_4ub_2f))
    );
    fn test_field_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULVertex_2f_4ub_2f>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULVertex_2f_4ub_2f),
                "::",
                stringify!(pos)
            )
        );
    }
    test_field_pos();
    fn test_field_color() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULVertex_2f_4ub_2f>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ULVertex_2f_4ub_2f),
                "::",
                stringify!(color)
            )
        );
    }
    test_field_color();
    fn test_field_obj() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULVertex_2f_4ub_2f>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ULVertex_2f_4ub_2f),
                "::",
                stringify!(obj)
            )
        );
    }
    test_field_obj();
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ULVertex_2f_4ub_2f_2f_28f {
    pub pos: [f32; 2usize],
    pub color: [::std::os::raw::c_uchar; 4usize],
    pub tex: [f32; 2usize],
    pub obj: [f32; 2usize],
    pub data0: [f32; 4usize],
    pub data1: [f32; 4usize],
    pub data2: [f32; 4usize],
    pub data3: [f32; 4usize],
    pub data4: [f32; 4usize],
    pub data5: [f32; 4usize],
    pub data6: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_ULVertex_2f_4ub_2f_2f_28f() {
    assert_eq!(
        ::std::mem::size_of::<ULVertex_2f_4ub_2f_2f_28f>(),
        140usize,
        concat!("Size of: ", stringify!(ULVertex_2f_4ub_2f_2f_28f))
    );
    assert_eq!(
        ::std::mem::align_of::<ULVertex_2f_4ub_2f_2f_28f>(),
        1usize,
        concat!("Alignment of ", stringify!(ULVertex_2f_4ub_2f_2f_28f))
    );
    fn test_field_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULVertex_2f_4ub_2f_2f_28f>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULVertex_2f_4ub_2f_2f_28f),
                "::",
                stringify!(pos)
            )
        );
    }
    test_field_pos();
    fn test_field_color() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULVertex_2f_4ub_2f_2f_28f>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ULVertex_2f_4ub_2f_2f_28f),
                "::",
                stringify!(color)
            )
        );
    }
    test_field_color();
    fn test_field_tex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULVertex_2f_4ub_2f_2f_28f>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tex) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ULVertex_2f_4ub_2f_2f_28f),
                "::",
                stringify!(tex)
            )
        );
    }
    test_field_tex();
    fn test_field_obj() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULVertex_2f_4ub_2f_2f_28f>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ULVertex_2f_4ub_2f_2f_28f),
                "::",
                stringify!(obj)
            )
        );
    }
    test_field_obj();
    fn test_field_data0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULVertex_2f_4ub_2f_2f_28f>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data0) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ULVertex_2f_4ub_2f_2f_28f),
                "::",
                stringify!(data0)
            )
        );
    }
    test_field_data0();
    fn test_field_data1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULVertex_2f_4ub_2f_2f_28f>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ULVertex_2f_4ub_2f_2f_28f),
                "::",
                stringify!(data1)
            )
        );
    }
    test_field_data1();
    fn test_field_data2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULVertex_2f_4ub_2f_2f_28f>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data2) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(ULVertex_2f_4ub_2f_2f_28f),
                "::",
                stringify!(data2)
            )
        );
    }
    test_field_data2();
    fn test_field_data3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULVertex_2f_4ub_2f_2f_28f>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data3) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(ULVertex_2f_4ub_2f_2f_28f),
                "::",
                stringify!(data3)
            )
        );
    }
    test_field_data3();
    fn test_field_data4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULVertex_2f_4ub_2f_2f_28f>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data4) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(ULVertex_2f_4ub_2f_2f_28f),
                "::",
                stringify!(data4)
            )
        );
    }
    test_field_data4();
    fn test_field_data5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULVertex_2f_4ub_2f_2f_28f>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data5) as usize - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(ULVertex_2f_4ub_2f_2f_28f),
                "::",
                stringify!(data5)
            )
        );
    }
    test_field_data5();
    fn test_field_data6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULVertex_2f_4ub_2f_2f_28f>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data6) as usize - ptr as usize
            },
            124usize,
            concat!(
                "Offset of field: ",
                stringify!(ULVertex_2f_4ub_2f_2f_28f),
                "::",
                stringify!(data6)
            )
        );
    }
    test_field_data6();
}
pub const ULVertexBufferFormat_kVertexBufferFormat_2f_4ub_2f: ULVertexBufferFormat = 0;
pub const ULVertexBufferFormat_kVertexBufferFormat_2f_4ub_2f_2f_28f: ULVertexBufferFormat = 1;
pub type ULVertexBufferFormat = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ULVertexBuffer {
    pub format: ULVertexBufferFormat,
    pub size: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_ULVertexBuffer() {
    assert_eq!(
        ::std::mem::size_of::<ULVertexBuffer>(),
        16usize,
        concat!("Size of: ", stringify!(ULVertexBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ULVertexBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(ULVertexBuffer))
    );
    fn test_field_format() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULVertexBuffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULVertexBuffer),
                "::",
                stringify!(format)
            )
        );
    }
    test_field_format();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULVertexBuffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ULVertexBuffer),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULVertexBuffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ULVertexBuffer),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
pub type ULIndexType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ULIndexBuffer {
    pub size: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_ULIndexBuffer() {
    assert_eq!(
        ::std::mem::size_of::<ULIndexBuffer>(),
        16usize,
        concat!("Size of: ", stringify!(ULIndexBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ULIndexBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(ULIndexBuffer))
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULIndexBuffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULIndexBuffer),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULIndexBuffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ULIndexBuffer),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
pub const ULShaderType_kShaderType_Fill: ULShaderType = 0;
pub const ULShaderType_kShaderType_FillPath: ULShaderType = 1;
pub type ULShaderType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ULMatrix4x4 {
    pub data: [f32; 16usize],
}
#[test]
fn bindgen_test_layout_ULMatrix4x4() {
    assert_eq!(
        ::std::mem::size_of::<ULMatrix4x4>(),
        64usize,
        concat!("Size of: ", stringify!(ULMatrix4x4))
    );
    assert_eq!(
        ::std::mem::align_of::<ULMatrix4x4>(),
        4usize,
        concat!("Alignment of ", stringify!(ULMatrix4x4))
    );
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULMatrix4x4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULMatrix4x4),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ULvec4 {
    pub value: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_ULvec4() {
    assert_eq!(
        ::std::mem::size_of::<ULvec4>(),
        16usize,
        concat!("Size of: ", stringify!(ULvec4))
    );
    assert_eq!(
        ::std::mem::align_of::<ULvec4>(),
        4usize,
        concat!("Alignment of ", stringify!(ULvec4))
    );
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULvec4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULvec4),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ULGPUState {
    pub viewport_width: ::std::os::raw::c_uint,
    pub viewport_height: ::std::os::raw::c_uint,
    pub transform: ULMatrix4x4,
    pub enable_texturing: bool,
    pub enable_blend: bool,
    pub shader_type: ::std::os::raw::c_uchar,
    pub render_buffer_id: ::std::os::raw::c_uint,
    pub texture_1_id: ::std::os::raw::c_uint,
    pub texture_2_id: ::std::os::raw::c_uint,
    pub texture_3_id: ::std::os::raw::c_uint,
    pub uniform_scalar: [f32; 8usize],
    pub uniform_vector: [ULvec4; 8usize],
    pub clip_size: ::std::os::raw::c_uchar,
    pub clip: [ULMatrix4x4; 8usize],
    pub enable_scissor: bool,
    pub scissor_rect: ULIntRect,
}
#[test]
fn bindgen_test_layout_ULGPUState() {
    assert_eq!(
        ::std::mem::size_of::<ULGPUState>(),
        788usize,
        concat!("Size of: ", stringify!(ULGPUState))
    );
    assert_eq!(
        ::std::mem::align_of::<ULGPUState>(),
        4usize,
        concat!("Alignment of ", stringify!(ULGPUState))
    );
    fn test_field_viewport_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).viewport_width) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUState),
                "::",
                stringify!(viewport_width)
            )
        );
    }
    test_field_viewport_width();
    fn test_field_viewport_height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).viewport_height) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUState),
                "::",
                stringify!(viewport_height)
            )
        );
    }
    test_field_viewport_height();
    fn test_field_transform() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).transform) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUState),
                "::",
                stringify!(transform)
            )
        );
    }
    test_field_transform();
    fn test_field_enable_texturing() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable_texturing) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUState),
                "::",
                stringify!(enable_texturing)
            )
        );
    }
    test_field_enable_texturing();
    fn test_field_enable_blend() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable_blend) as usize - ptr as usize
            },
            73usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUState),
                "::",
                stringify!(enable_blend)
            )
        );
    }
    test_field_enable_blend();
    fn test_field_shader_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shader_type) as usize - ptr as usize
            },
            74usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUState),
                "::",
                stringify!(shader_type)
            )
        );
    }
    test_field_shader_type();
    fn test_field_render_buffer_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).render_buffer_id) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUState),
                "::",
                stringify!(render_buffer_id)
            )
        );
    }
    test_field_render_buffer_id();
    fn test_field_texture_1_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_1_id) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUState),
                "::",
                stringify!(texture_1_id)
            )
        );
    }
    test_field_texture_1_id();
    fn test_field_texture_2_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_2_id) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUState),
                "::",
                stringify!(texture_2_id)
            )
        );
    }
    test_field_texture_2_id();
    fn test_field_texture_3_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_3_id) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUState),
                "::",
                stringify!(texture_3_id)
            )
        );
    }
    test_field_texture_3_id();
    fn test_field_uniform_scalar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uniform_scalar) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUState),
                "::",
                stringify!(uniform_scalar)
            )
        );
    }
    test_field_uniform_scalar();
    fn test_field_uniform_vector() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uniform_vector) as usize - ptr as usize
            },
            124usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUState),
                "::",
                stringify!(uniform_vector)
            )
        );
    }
    test_field_uniform_vector();
    fn test_field_clip_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).clip_size) as usize - ptr as usize
            },
            252usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUState),
                "::",
                stringify!(clip_size)
            )
        );
    }
    test_field_clip_size();
    fn test_field_clip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).clip) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUState),
                "::",
                stringify!(clip)
            )
        );
    }
    test_field_clip();
    fn test_field_enable_scissor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable_scissor) as usize - ptr as usize
            },
            768usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUState),
                "::",
                stringify!(enable_scissor)
            )
        );
    }
    test_field_enable_scissor();
    fn test_field_scissor_rect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scissor_rect) as usize - ptr as usize
            },
            772usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUState),
                "::",
                stringify!(scissor_rect)
            )
        );
    }
    test_field_scissor_rect();
}
pub const ULCommandType_kCommandType_ClearRenderBuffer: ULCommandType = 0;
pub const ULCommandType_kCommandType_DrawGeometry: ULCommandType = 1;
pub type ULCommandType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ULCommand {
    pub command_type: ::std::os::raw::c_uchar,
    pub gpu_state: ULGPUState,
    pub geometry_id: ::std::os::raw::c_uint,
    pub indices_count: ::std::os::raw::c_uint,
    pub indices_offset: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ULCommand() {
    assert_eq!(
        ::std::mem::size_of::<ULCommand>(),
        804usize,
        concat!("Size of: ", stringify!(ULCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<ULCommand>(),
        4usize,
        concat!("Alignment of ", stringify!(ULCommand))
    );
    fn test_field_command_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).command_type) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULCommand),
                "::",
                stringify!(command_type)
            )
        );
    }
    test_field_command_type();
    fn test_field_gpu_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gpu_state) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ULCommand),
                "::",
                stringify!(gpu_state)
            )
        );
    }
    test_field_gpu_state();
    fn test_field_geometry_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geometry_id) as usize - ptr as usize
            },
            792usize,
            concat!(
                "Offset of field: ",
                stringify!(ULCommand),
                "::",
                stringify!(geometry_id)
            )
        );
    }
    test_field_geometry_id();
    fn test_field_indices_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).indices_count) as usize - ptr as usize
            },
            796usize,
            concat!(
                "Offset of field: ",
                stringify!(ULCommand),
                "::",
                stringify!(indices_count)
            )
        );
    }
    test_field_indices_count();
    fn test_field_indices_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).indices_offset) as usize - ptr as usize
            },
            800usize,
            concat!(
                "Offset of field: ",
                stringify!(ULCommand),
                "::",
                stringify!(indices_offset)
            )
        );
    }
    test_field_indices_offset();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ULCommandList {
    pub size: ::std::os::raw::c_uint,
    pub commands: *mut ULCommand,
}
#[test]
fn bindgen_test_layout_ULCommandList() {
    assert_eq!(
        ::std::mem::size_of::<ULCommandList>(),
        16usize,
        concat!("Size of: ", stringify!(ULCommandList))
    );
    assert_eq!(
        ::std::mem::align_of::<ULCommandList>(),
        8usize,
        concat!("Alignment of ", stringify!(ULCommandList))
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULCommandList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULCommandList),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_commands() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULCommandList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).commands) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ULCommandList),
                "::",
                stringify!(commands)
            )
        );
    }
    test_field_commands();
}
pub type ULGPUDriverBeginSynchronizeCallback = ::std::option::Option<unsafe extern "C" fn()>;
pub type ULGPUDriverEndSynchronizeCallback = ::std::option::Option<unsafe extern "C" fn()>;
pub type ULGPUDriverNextTextureIdCallback =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>;
pub type ULGPUDriverCreateTextureCallback = ::std::option::Option<
    unsafe extern "C" fn(texture_id: ::std::os::raw::c_uint, bitmap: ULBitmap),
>;
pub type ULGPUDriverUpdateTextureCallback = ::std::option::Option<
    unsafe extern "C" fn(texture_id: ::std::os::raw::c_uint, bitmap: ULBitmap),
>;
pub type ULGPUDriverDestroyTextureCallback =
    ::std::option::Option<unsafe extern "C" fn(texture_id: ::std::os::raw::c_uint)>;
pub type ULGPUDriverNextRenderBufferIdCallback =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>;
pub type ULGPUDriverCreateRenderBufferCallback = ::std::option::Option<
    unsafe extern "C" fn(render_buffer_id: ::std::os::raw::c_uint, buffer: ULRenderBuffer),
>;
pub type ULGPUDriverDestroyRenderBufferCallback =
    ::std::option::Option<unsafe extern "C" fn(render_buffer_id: ::std::os::raw::c_uint)>;
pub type ULGPUDriverNextGeometryIdCallback =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>;
pub type ULGPUDriverCreateGeometryCallback = ::std::option::Option<
    unsafe extern "C" fn(
        geometry_id: ::std::os::raw::c_uint,
        vertices: ULVertexBuffer,
        indices: ULIndexBuffer,
    ),
>;
pub type ULGPUDriverUpdateGeometryCallback = ::std::option::Option<
    unsafe extern "C" fn(
        geometry_id: ::std::os::raw::c_uint,
        vertices: ULVertexBuffer,
        indices: ULIndexBuffer,
    ),
>;
pub type ULGPUDriverDestroyGeometryCallback =
    ::std::option::Option<unsafe extern "C" fn(geometry_id: ::std::os::raw::c_uint)>;
pub type ULGPUDriverUpdateCommandListCallback =
    ::std::option::Option<unsafe extern "C" fn(list: ULCommandList)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ULGPUDriver {
    pub begin_synchronize: ULGPUDriverBeginSynchronizeCallback,
    pub end_synchronize: ULGPUDriverEndSynchronizeCallback,
    pub next_texture_id: ULGPUDriverNextTextureIdCallback,
    pub create_texture: ULGPUDriverCreateTextureCallback,
    pub update_texture: ULGPUDriverUpdateTextureCallback,
    pub destroy_texture: ULGPUDriverDestroyTextureCallback,
    pub next_render_buffer_id: ULGPUDriverNextRenderBufferIdCallback,
    pub create_render_buffer: ULGPUDriverCreateRenderBufferCallback,
    pub destroy_render_buffer: ULGPUDriverDestroyRenderBufferCallback,
    pub next_geometry_id: ULGPUDriverNextGeometryIdCallback,
    pub create_geometry: ULGPUDriverCreateGeometryCallback,
    pub update_geometry: ULGPUDriverUpdateGeometryCallback,
    pub destroy_geometry: ULGPUDriverDestroyGeometryCallback,
    pub update_command_list: ULGPUDriverUpdateCommandListCallback,
}
#[test]
fn bindgen_test_layout_ULGPUDriver() {
    assert_eq!(
        ::std::mem::size_of::<ULGPUDriver>(),
        112usize,
        concat!("Size of: ", stringify!(ULGPUDriver))
    );
    assert_eq!(
        ::std::mem::align_of::<ULGPUDriver>(),
        8usize,
        concat!("Alignment of ", stringify!(ULGPUDriver))
    );
    fn test_field_begin_synchronize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUDriver>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).begin_synchronize) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUDriver),
                "::",
                stringify!(begin_synchronize)
            )
        );
    }
    test_field_begin_synchronize();
    fn test_field_end_synchronize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUDriver>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).end_synchronize) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUDriver),
                "::",
                stringify!(end_synchronize)
            )
        );
    }
    test_field_end_synchronize();
    fn test_field_next_texture_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUDriver>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next_texture_id) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUDriver),
                "::",
                stringify!(next_texture_id)
            )
        );
    }
    test_field_next_texture_id();
    fn test_field_create_texture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUDriver>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_texture) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUDriver),
                "::",
                stringify!(create_texture)
            )
        );
    }
    test_field_create_texture();
    fn test_field_update_texture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUDriver>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).update_texture) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUDriver),
                "::",
                stringify!(update_texture)
            )
        );
    }
    test_field_update_texture();
    fn test_field_destroy_texture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUDriver>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_texture) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUDriver),
                "::",
                stringify!(destroy_texture)
            )
        );
    }
    test_field_destroy_texture();
    fn test_field_next_render_buffer_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUDriver>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next_render_buffer_id) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUDriver),
                "::",
                stringify!(next_render_buffer_id)
            )
        );
    }
    test_field_next_render_buffer_id();
    fn test_field_create_render_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUDriver>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_render_buffer) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUDriver),
                "::",
                stringify!(create_render_buffer)
            )
        );
    }
    test_field_create_render_buffer();
    fn test_field_destroy_render_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUDriver>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_render_buffer) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUDriver),
                "::",
                stringify!(destroy_render_buffer)
            )
        );
    }
    test_field_destroy_render_buffer();
    fn test_field_next_geometry_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUDriver>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next_geometry_id) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUDriver),
                "::",
                stringify!(next_geometry_id)
            )
        );
    }
    test_field_next_geometry_id();
    fn test_field_create_geometry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUDriver>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_geometry) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUDriver),
                "::",
                stringify!(create_geometry)
            )
        );
    }
    test_field_create_geometry();
    fn test_field_update_geometry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUDriver>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).update_geometry) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUDriver),
                "::",
                stringify!(update_geometry)
            )
        );
    }
    test_field_update_geometry();
    fn test_field_destroy_geometry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUDriver>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_geometry) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUDriver),
                "::",
                stringify!(destroy_geometry)
            )
        );
    }
    test_field_destroy_geometry();
    fn test_field_update_command_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULGPUDriver>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).update_command_list) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(ULGPUDriver),
                "::",
                stringify!(update_command_list)
            )
        );
    }
    test_field_update_command_list();
}
extern "C" {
    pub fn ulApplyProjection(
        transform: ULMatrix4x4,
        viewport_width: f32,
        viewport_height: f32,
        flip_y: bool,
    ) -> ULMatrix4x4;
}
extern "C" {
    pub fn ulCreateKeyEvent(
        type_: ULKeyEventType,
        modifiers: ::std::os::raw::c_uint,
        virtual_key_code: ::std::os::raw::c_int,
        native_key_code: ::std::os::raw::c_int,
        text: ULString,
        unmodified_text: ULString,
        is_keypad: bool,
        is_auto_repeat: bool,
        is_system_key: bool,
    ) -> ULKeyEvent;
}
extern "C" {
    pub fn ulCreateKeyEventWindows(
        type_: ULKeyEventType,
        wparam: usize,
        lparam: isize,
        is_system_key: bool,
    ) -> ULKeyEvent;
}
extern "C" {
    pub fn ulDestroyKeyEvent(evt: ULKeyEvent);
}
pub const ULLogLevel_kLogLevel_Error: ULLogLevel = 0;
pub const ULLogLevel_kLogLevel_Warning: ULLogLevel = 1;
pub const ULLogLevel_kLogLevel_Info: ULLogLevel = 2;
pub type ULLogLevel = ::std::os::raw::c_int;
pub type ULLoggerLogMessageCallback =
    ::std::option::Option<unsafe extern "C" fn(log_level: ULLogLevel, message: ULString)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ULLogger {
    pub log_message: ULLoggerLogMessageCallback,
}
#[test]
fn bindgen_test_layout_ULLogger() {
    assert_eq!(
        ::std::mem::size_of::<ULLogger>(),
        8usize,
        concat!("Size of: ", stringify!(ULLogger))
    );
    assert_eq!(
        ::std::mem::align_of::<ULLogger>(),
        8usize,
        concat!("Alignment of ", stringify!(ULLogger))
    );
    fn test_field_log_message() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULLogger>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).log_message) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULLogger),
                "::",
                stringify!(log_message)
            )
        );
    }
    test_field_log_message();
}
extern "C" {
    pub fn ulCreateMouseEvent(
        type_: ULMouseEventType,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        button: ULMouseButton,
    ) -> ULMouseEvent;
}
extern "C" {
    pub fn ulDestroyMouseEvent(evt: ULMouseEvent);
}
extern "C" {
    pub fn ulSurfaceGetWidth(surface: ULSurface) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ulSurfaceGetHeight(surface: ULSurface) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ulSurfaceGetRowBytes(surface: ULSurface) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ulSurfaceGetSize(surface: ULSurface) -> size_t;
}
extern "C" {
    pub fn ulSurfaceLockPixels(surface: ULSurface) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ulSurfaceUnlockPixels(surface: ULSurface);
}
extern "C" {
    pub fn ulSurfaceResize(
        surface: ULSurface,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn ulSurfaceSetDirtyBounds(surface: ULSurface, bounds: ULIntRect);
}
extern "C" {
    pub fn ulSurfaceGetDirtyBounds(surface: ULSurface) -> ULIntRect;
}
extern "C" {
    pub fn ulSurfaceClearDirtyBounds(surface: ULSurface);
}
extern "C" {
    pub fn ulSurfaceGetUserData(surface: ULSurface) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ulBitmapSurfaceGetBitmap(surface: ULBitmapSurface) -> ULBitmap;
}
pub type ULSurfaceDefinitionCreateCallback = ::std::option::Option<
    unsafe extern "C" fn(
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type ULSurfaceDefinitionDestroyCallback =
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>;
pub type ULSurfaceDefinitionGetWidthCallback = ::std::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_uint,
>;
pub type ULSurfaceDefinitionGetHeightCallback = ::std::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_uint,
>;
pub type ULSurfaceDefinitionGetRowBytesCallback = ::std::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_uint,
>;
pub type ULSurfaceDefinitionGetSizeCallback =
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void) -> size_t>;
pub type ULSurfaceDefinitionLockPixelsCallback = ::std::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type ULSurfaceDefinitionUnlockPixelsCallback =
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>;
pub type ULSurfaceDefinitionResizeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ULSurfaceDefinition {
    pub create: ULSurfaceDefinitionCreateCallback,
    pub destroy: ULSurfaceDefinitionDestroyCallback,
    pub get_width: ULSurfaceDefinitionGetWidthCallback,
    pub get_height: ULSurfaceDefinitionGetHeightCallback,
    pub get_row_bytes: ULSurfaceDefinitionGetRowBytesCallback,
    pub get_size: ULSurfaceDefinitionGetSizeCallback,
    pub lock_pixels: ULSurfaceDefinitionLockPixelsCallback,
    pub unlock_pixels: ULSurfaceDefinitionUnlockPixelsCallback,
    pub resize: ULSurfaceDefinitionResizeCallback,
}
#[test]
fn bindgen_test_layout_ULSurfaceDefinition() {
    assert_eq!(
        ::std::mem::size_of::<ULSurfaceDefinition>(),
        72usize,
        concat!("Size of: ", stringify!(ULSurfaceDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<ULSurfaceDefinition>(),
        8usize,
        concat!("Alignment of ", stringify!(ULSurfaceDefinition))
    );
    fn test_field_create() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULSurfaceDefinition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULSurfaceDefinition),
                "::",
                stringify!(create)
            )
        );
    }
    test_field_create();
    fn test_field_destroy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULSurfaceDefinition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ULSurfaceDefinition),
                "::",
                stringify!(destroy)
            )
        );
    }
    test_field_destroy();
    fn test_field_get_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULSurfaceDefinition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_width) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ULSurfaceDefinition),
                "::",
                stringify!(get_width)
            )
        );
    }
    test_field_get_width();
    fn test_field_get_height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULSurfaceDefinition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_height) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ULSurfaceDefinition),
                "::",
                stringify!(get_height)
            )
        );
    }
    test_field_get_height();
    fn test_field_get_row_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULSurfaceDefinition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_row_bytes) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ULSurfaceDefinition),
                "::",
                stringify!(get_row_bytes)
            )
        );
    }
    test_field_get_row_bytes();
    fn test_field_get_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULSurfaceDefinition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_size) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ULSurfaceDefinition),
                "::",
                stringify!(get_size)
            )
        );
    }
    test_field_get_size();
    fn test_field_lock_pixels() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULSurfaceDefinition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lock_pixels) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ULSurfaceDefinition),
                "::",
                stringify!(lock_pixels)
            )
        );
    }
    test_field_lock_pixels();
    fn test_field_unlock_pixels() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULSurfaceDefinition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unlock_pixels) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ULSurfaceDefinition),
                "::",
                stringify!(unlock_pixels)
            )
        );
    }
    test_field_unlock_pixels();
    fn test_field_resize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ULSurfaceDefinition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).resize) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ULSurfaceDefinition),
                "::",
                stringify!(resize)
            )
        );
    }
    test_field_resize();
}
extern "C" {
    pub fn ulPlatformSetLogger(logger: ULLogger);
}
extern "C" {
    pub fn ulPlatformSetFileSystem(file_system: ULFileSystem);
}
extern "C" {
    pub fn ulPlatformSetSurfaceDefinition(surface_definition: ULSurfaceDefinition);
}
extern "C" {
    pub fn ulPlatformSetGPUDriver(gpu_driver: ULGPUDriver);
}
extern "C" {
    pub fn ulPlatformSetClipboard(clipboard: ULClipboard);
}
extern "C" {
    pub fn ulCreateRenderer(config: ULConfig) -> ULRenderer;
}
extern "C" {
    pub fn ulDestroyRenderer(renderer: ULRenderer);
}
extern "C" {
    pub fn ulUpdate(renderer: ULRenderer);
}
extern "C" {
    pub fn ulRender(renderer: ULRenderer);
}
extern "C" {
    pub fn ulPurgeMemory(renderer: ULRenderer);
}
extern "C" {
    pub fn ulLogMemoryUsage(renderer: ULRenderer);
}
extern "C" {
    pub fn ulCreateScrollEvent(
        type_: ULScrollEventType,
        delta_x: ::std::os::raw::c_int,
        delta_y: ::std::os::raw::c_int,
    ) -> ULScrollEvent;
}
extern "C" {
    pub fn ulDestroyScrollEvent(evt: ULScrollEvent);
}
extern "C" {
    pub fn ulCreateSession(renderer: ULRenderer, is_persistent: bool, name: ULString) -> ULSession;
}
extern "C" {
    pub fn ulDestroySession(session: ULSession);
}
extern "C" {
    pub fn ulDefaultSession(renderer: ULRenderer) -> ULSession;
}
extern "C" {
    pub fn ulSessionIsPersistent(session: ULSession) -> bool;
}
extern "C" {
    pub fn ulSessionGetName(session: ULSession) -> ULString;
}
extern "C" {
    pub fn ulSessionGetId(session: ULSession) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn ulSessionGetDiskPath(session: ULSession) -> ULString;
}
extern "C" {
    pub fn ulCreateViewConfig() -> ULViewConfig;
}
extern "C" {
    pub fn ulDestroyViewConfig(config: ULViewConfig);
}
extern "C" {
    pub fn ulViewConfigSetIsAccelerated(config: ULViewConfig, is_accelerated: bool);
}
extern "C" {
    pub fn ulViewConfigSetIsTransparent(config: ULViewConfig, is_transparent: bool);
}
extern "C" {
    pub fn ulViewConfigSetInitialDeviceScale(config: ULViewConfig, initial_device_scale: f64);
}
extern "C" {
    pub fn ulViewConfigSetInitialFocus(config: ULViewConfig, is_focused: bool);
}
extern "C" {
    pub fn ulViewConfigSetEnableImages(config: ULViewConfig, enabled: bool);
}
extern "C" {
    pub fn ulViewConfigSetEnableJavaScript(config: ULViewConfig, enabled: bool);
}
extern "C" {
    pub fn ulViewConfigSetFontFamilyStandard(config: ULViewConfig, font_name: ULString);
}
extern "C" {
    pub fn ulViewConfigSetFontFamilyFixed(config: ULViewConfig, font_name: ULString);
}
extern "C" {
    pub fn ulViewConfigSetFontFamilySerif(config: ULViewConfig, font_name: ULString);
}
extern "C" {
    pub fn ulViewConfigSetFontFamilySansSerif(config: ULViewConfig, font_name: ULString);
}
extern "C" {
    pub fn ulViewConfigSetUserAgent(config: ULViewConfig, agent_string: ULString);
}
extern "C" {
    pub fn ulCreateView(
        renderer: ULRenderer,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        view_config: ULViewConfig,
        session: ULSession,
    ) -> ULView;
}
extern "C" {
    pub fn ulDestroyView(view: ULView);
}
extern "C" {
    pub fn ulViewGetURL(view: ULView) -> ULString;
}
extern "C" {
    pub fn ulViewGetTitle(view: ULView) -> ULString;
}
extern "C" {
    pub fn ulViewGetWidth(view: ULView) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ulViewGetHeight(view: ULView) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ulViewGetDeviceScale(view: ULView) -> f64;
}
extern "C" {
    pub fn ulViewSetDeviceScale(view: ULView, scale: f64);
}
extern "C" {
    pub fn ulViewIsAccelerated(view: ULView) -> bool;
}
extern "C" {
    pub fn ulViewIsTransparent(view: ULView) -> bool;
}
extern "C" {
    pub fn ulViewIsLoading(view: ULView) -> bool;
}
extern "C" {
    pub fn ulViewGetRenderTarget(view: ULView) -> ULRenderTarget;
}
extern "C" {
    pub fn ulViewGetSurface(view: ULView) -> ULSurface;
}
extern "C" {
    pub fn ulViewLoadHTML(view: ULView, html_string: ULString);
}
extern "C" {
    pub fn ulViewLoadURL(view: ULView, url_string: ULString);
}
extern "C" {
    pub fn ulViewResize(
        view: ULView,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn ulViewLockJSContext(view: ULView) -> JSContextRef;
}
extern "C" {
    pub fn ulViewUnlockJSContext(view: ULView);
}
extern "C" {
    pub fn ulViewEvaluateScript(
        view: ULView,
        js_string: ULString,
        exception: *mut ULString,
    ) -> ULString;
}
extern "C" {
    pub fn ulViewCanGoBack(view: ULView) -> bool;
}
extern "C" {
    pub fn ulViewCanGoForward(view: ULView) -> bool;
}
extern "C" {
    pub fn ulViewGoBack(view: ULView);
}
extern "C" {
    pub fn ulViewGoForward(view: ULView);
}
extern "C" {
    pub fn ulViewGoToHistoryOffset(view: ULView, offset: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ulViewReload(view: ULView);
}
extern "C" {
    pub fn ulViewStop(view: ULView);
}
extern "C" {
    pub fn ulViewFocus(view: ULView);
}
extern "C" {
    pub fn ulViewUnfocus(view: ULView);
}
extern "C" {
    pub fn ulViewHasFocus(view: ULView) -> bool;
}
extern "C" {
    pub fn ulViewHasInputFocus(view: ULView) -> bool;
}
extern "C" {
    pub fn ulViewFireKeyEvent(view: ULView, key_event: ULKeyEvent);
}
extern "C" {
    pub fn ulViewFireMouseEvent(view: ULView, mouse_event: ULMouseEvent);
}
extern "C" {
    pub fn ulViewFireScrollEvent(view: ULView, scroll_event: ULScrollEvent);
}
pub type ULChangeTitleCallback = ::std::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void, caller: ULView, title: ULString),
>;
extern "C" {
    pub fn ulViewSetChangeTitleCallback(
        view: ULView,
        callback: ULChangeTitleCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULChangeURLCallback = ::std::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void, caller: ULView, url: ULString),
>;
extern "C" {
    pub fn ulViewSetChangeURLCallback(
        view: ULView,
        callback: ULChangeURLCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULChangeTooltipCallback = ::std::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void, caller: ULView, tooltip: ULString),
>;
extern "C" {
    pub fn ulViewSetChangeTooltipCallback(
        view: ULView,
        callback: ULChangeTooltipCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULChangeCursorCallback = ::std::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void, caller: ULView, cursor: ULCursor),
>;
extern "C" {
    pub fn ulViewSetChangeCursorCallback(
        view: ULView,
        callback: ULChangeCursorCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULAddConsoleMessageCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        caller: ULView,
        source: ULMessageSource,
        level: ULMessageLevel,
        message: ULString,
        line_number: ::std::os::raw::c_uint,
        column_number: ::std::os::raw::c_uint,
        source_id: ULString,
    ),
>;
extern "C" {
    pub fn ulViewSetAddConsoleMessageCallback(
        view: ULView,
        callback: ULAddConsoleMessageCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULCreateChildViewCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        caller: ULView,
        opener_url: ULString,
        target_url: ULString,
        is_popup: bool,
        popup_rect: ULIntRect,
    ) -> ULView,
>;
extern "C" {
    pub fn ulViewSetCreateChildViewCallback(
        view: ULView,
        callback: ULCreateChildViewCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULBeginLoadingCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        caller: ULView,
        frame_id: ::std::os::raw::c_ulonglong,
        is_main_frame: bool,
        url: ULString,
    ),
>;
extern "C" {
    pub fn ulViewSetBeginLoadingCallback(
        view: ULView,
        callback: ULBeginLoadingCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULFinishLoadingCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        caller: ULView,
        frame_id: ::std::os::raw::c_ulonglong,
        is_main_frame: bool,
        url: ULString,
    ),
>;
extern "C" {
    pub fn ulViewSetFinishLoadingCallback(
        view: ULView,
        callback: ULFinishLoadingCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULFailLoadingCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        caller: ULView,
        frame_id: ::std::os::raw::c_ulonglong,
        is_main_frame: bool,
        url: ULString,
        description: ULString,
        error_domain: ULString,
        error_code: ::std::os::raw::c_int,
    ),
>;
extern "C" {
    pub fn ulViewSetFailLoadingCallback(
        view: ULView,
        callback: ULFailLoadingCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULWindowObjectReadyCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        caller: ULView,
        frame_id: ::std::os::raw::c_ulonglong,
        is_main_frame: bool,
        url: ULString,
    ),
>;
extern "C" {
    pub fn ulViewSetWindowObjectReadyCallback(
        view: ULView,
        callback: ULWindowObjectReadyCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULDOMReadyCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        caller: ULView,
        frame_id: ::std::os::raw::c_ulonglong,
        is_main_frame: bool,
        url: ULString,
    ),
>;
extern "C" {
    pub fn ulViewSetDOMReadyCallback(
        view: ULView,
        callback: ULDOMReadyCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULUpdateHistoryCallback = ::std::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void, caller: ULView),
>;
extern "C" {
    pub fn ulViewSetUpdateHistoryCallback(
        view: ULView,
        callback: ULUpdateHistoryCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ulViewSetNeedsPaint(view: ULView, needs_paint: bool);
}
extern "C" {
    pub fn ulViewGetNeedsPaint(view: ULView) -> bool;
}
extern "C" {
    pub fn ulViewCreateInspectorView(view: ULView) -> ULView;
}
